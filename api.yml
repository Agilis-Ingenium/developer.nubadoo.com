openapi: 3.0.0

info:
  title: Health Tracker API
  description: |
    Welcome to the Nubadoo Health Tracker API! Developers can seamlessly harness the extensive capabilities of our platform and effortlessly integrate our services into their applications.
    
    Our API operates as a robust HTTP-based system, embracing the principles of REST architecture. With clearly defined resource URLs, it offers predictable endpoints for streamlined navigation. Error responses are communicated using standard HTTP status codes. Request payloads are accepted and responses are delivered in JSON format.
    
    You can effortlessly interact with our API using your preferred HTTP/REST library in your programming language of choice. Additionally, tools like Postman or CURL can facilitate easy access and testing of Nubadoo's API.
    
    Enjoy coding and exploring our API! ðŸ˜ŠðŸš€
    
    ---
    
    # HTTP Response Status Codes
    HTTP response status codes show whether or not a particular HTTP request was completed successfully. Section 10 of [RFC 2616](https://datatracker.ietf.org/doc/html/rfc2616) defines the status codes listed below. [RFC 7231](https://datatracker.ietf.org/doc/html/rfc7231) contains an updated specification.
    
    The Nubadoo Health Tracker API makes use of the following HTTP status codes, grouped into three classes:
    
    ## Successful Responses - 2XX
    
    ### 200 - Successful operation
    
    The request has succeeded.
    
    ### 201 - Created
    
    As a result of the request's success, a new resource has been generated. This is the response that is normally sent in response to POST or some PUT queries.
    
    ## Client Error - 4XX
    
    ### 400 - Bad Request
    Due to incorrect syntax, the server was unable to understand the request.
    
    ### 401 - Unauthorized
    Authentication is required and has failed or has not yet been provided.
    
    ### 403 - Forbidden
    The server refuses to provide the requested resource because the client does not have access permissions to the resource; that is, it is unauthorized. Unlike 401, the server is aware of the client's identity.
    
    ### 404 - Not Found
    The requested resource was not found. The client is free to make additional requests.
    
    ### 405 - Method Not Allowed
    A GET request on a form that needs data to be presented via POST, or a PUT request on a read-only resource, for example, is not supported for the requested resource.
    
    ## Server Error - 5XX
    
    ### 500 - Internal Server Error
    The server has come upon a circumstance that it is unsure how to handle.  Our team will be reviewing the root cause of issues and resolving the problems as soon as possible.
    
    ---
  
  version: '1.0'
  contact:
    name: Nubadoo Dev Support Team
    url: https://developer.nubadoo.com
    email: developers@nubadoo.com
  x-logo:
    url: "https://developer.nubadoo.com/open-api/logo.png"
    backgroundColor: "#fafafa"
  termsOfService: https://www.nubadoo.com/terms

servers:
  - description: Dev Server
    url: http://localhost:7060/v1
  - description: Live Server
    url: https://api.nubadoo.com/v1

tags:
- name: Activities
  description: |
    Activity tracking allows users to record, aggregate and analyze data related to physical activities and exercises, such as steps taken, distances covered, and workout intensity.

- name: Fitness Goals
  description: |
    The Fitness Goal endpoint allows users to track and manage their fitness-related activities and progress. It includes actions for recording, retrieving, updating, and managing data related to exercises, workouts and fitness goals.

- name: Food Items
  description: |
    Access to a database of food items with nutritional information, including calories, macronutrients (carbohydrates, proteins, fats), vitamins, and minerals.  Users can search and retrieve information about specific food items from the database.
    
- name: Meal Logs
  description: |
    Track and manage dietary intake with the Meal Logs API endpoint. Capture and maintain detailed records of daily nutrition, enabling users to log, retrieve, update, and delete meal-related data effortlessly. Empower users to monitor their dietary habits, facilitating better health and wellness tracking within the application

- name: Metrics
  description: |
    The Health Metrics endpoint allows users to record, retrieve, update, and manage a range of health-related measurements and data to track their overall well-being and monitor their progress over time.
    
- name: Ping
  description: |
    Ping is a utility function that can be used to test the health of the NuBaDoo Health Tracker API service.  The ping service only responds with 'Pong'.
    
- name: Users
  description: |
    Manage user profiles and authentication through the Users API endpoint. This functionality allows seamless creation, retrieval, modification, and deletion of user accounts. Access various user-related functionalities, enabling secure authentication and personalized experiences within the application
    
- name: Workout Plans
  description: |
    Access and manage your personalized workout plans designed to meet your fitness goals efficiently. This API endpoint empowers users to view, create, and organize workout routines tailored to their preferences and fitness aspirations. Stay motivated and track progress with 'Your Workout Plans' to achieve your fitness objectives effectively.

x-tagGroups:
- name: Functionality
  tags:
    - Activities
    - Fitness Goals
    - Food Items
    - Meal Logs
    - Metrics
    - Users
    - Workout Plans
- name: Utility
  tags:
    - Ping

paths:
  /activities:
    get:
      description: Get all activities
      summary: getAllActivities
      tags:
        - Activities
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
    
    post:
      description: Add a new activity
      summary: addActivity
      tags:
        - Activities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activity'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
  /activities/user/{user-id}:
    parameters:
    - in: path
      name: user-id
      schema:
        type: integer
      required: true
    get:
      description: Get activities by user ID
      summary: getActivitiesByUserId
      tags:
        - Activities
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
          
    delete:
      description: Delete activities by user ID
      summary: deleteActivitiesByUserId
      tags:
        - Activities
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
                
  /activities/{activity-id}:
    parameters:
    - in: path
      name: activity-id
      schema:
        type: integer
      required: true
    delete:
      description: Delete an activity by its activity ID
      summary: deleteActivity
      tags:
        - Activities
      responses:
        '204':
          description: No content
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
          
    patch:
      description: Update an activity's information by the activity ID
      summary: updateActivity
      tags:
        - Activities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activity'
      responses:
        '204':
          description: No content
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
          
    get:
      description: Get an activity by activity ID
      summary: getActivityByActivityId
      tags:
        - Activities
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
                
  /fitness-goals:
    get:
      description: Get all fitness goals
      summary: getAllFitnessGoals
      tags:
        - Fitness Goals
      responses:
        '200':
          description: OK
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
          
    post:
      description: Add a new fitness goal
      summary: addFitnessGoal
      tags:
        - Fitness Goals
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FitnessGoal'
              
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FitnessGoal'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
                
  /fitness-goals/{fitness-goal-id}:
    get:
      description: Get fitness goal by ID
      summary: getFitnessGoalByFitnessGoalId
      tags:
        - Fitness Goals
      parameters:
        - name: fitness-goal-id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FitnessGoal'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
          
    delete:
      description: Delete fitness goal by ID
      summary: deleteFitnessGoal
      tags:
        - Fitness Goals
      parameters:
        - name: fitness-goal-id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FitnessGoal'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
          
    patch:
      description: Update fitness goal by ID
      summary: updateFitnessGoal
      tags:
        - Fitness Goals
      parameters:
        - name: fitness-goal-id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FitnessGoal'
      responses:
        '204':
          description: No content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FitnessGoal'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
                
  /food-items:
    get:
      description: Get all food items
      summary: getAllFoodItems
      tags:
        - Food Items
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FoodItem'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
    post:
      description: Add a new food item
      summary: addFoodItem
      tags:
        - Food Items
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FoodItem'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodItem'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
          
  /food-items/{food-item-id}:
    get:
      description: Get a specific food item by ID
      summary: getFoodItemByFoodItemId
      tags:
        - Food Items
      parameters:
        - name: food-item-id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodItem'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
          
    delete:
      description: Delete a food item by ID
      summary: deleteFoodItem
      tags:
        - Food Items
      parameters:
        - name: food-item-id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodItem'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
          
    patch:
      description: Update an existing food item
      summary: updateFoodItem
      tags:
        - Food Items
      parameters:
        - name: food-item-id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FoodItem'
      responses:
        '204':
          description: No content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodItem'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
                
  /ping:
    get:
      description: Get Pong response
      summary: pong
      tags:
        - Ping
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pong'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
                
  /users:
    get:
      description: Get all users
      summary: getAllUsers
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
    post:
      description: Add a new user
      summary: addUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
          
  /users/{user-id}:
    get:
      description: Get a user by their user ID
      summary: getUserByUserId
      tags:
        - Users
      parameters:
        - name: user-id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
          
    delete:
      description: Delete a user by their user ID
      summary: deleteUser
      tags:
        - Users
      parameters:
        - name: user-id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No content
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
          
    patch:
      description: Update a user's information by their user ID
      summary: updateUser
      tags:
        - Users
      parameters:
        - name: user-id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '204':
          description: No content
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
          
  /users/email/{email}:
    get:
      description: Get a user by their email address
      summary: getUserByEmail
      tags:
        - Users
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
          
  /workout-plans:
    get:
      description: Get all workout plans
      summary: getAllWorkoutPlans
      tags:
        - Workout Plans
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkoutPlan'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
          
    post:
      description: Add a new workout plan
      summary: addWorkoutPlan
      tags:
        - Workout Plans
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkoutPlan'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkoutPlan'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
          
  /workout-plans/{workout-plan-id}:
    get:
      description: Get a workout plan by its workout plan ID
      summary: getWorkoutPlanByWorkoutPlanId
      tags:
        - Workout Plans
      parameters:
        - name: workout-plan-id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkoutPlan'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
          
    delete:
      description: Delete a workout plan by its workout plan ID
      summary: deleteWorkoutPlan
      tags:
        - Workout Plans
      parameters:
        - name: workout-plan-id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No content
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
          
    patch:
      description: Update a workout plan's information by its workout plan ID
      summary: updateWorkoutPlan
      tags:
        - Workout Plans
      parameters:
        - name: workout-plan-id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkoutPlan'
      responses:
        '204':
          description: No content
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
          
  /metrics:
    get:
      description: Get all metrics
      summary: getAllMetrics
      tags:
        - Metrics
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Metric'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
    post:
      description: Add a new metric
      summary: addMetric
      tags:
        - Metrics
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metric'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metric'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
          
  /meal-logs:
    get:
      summary: Get all meal logs
      operationId: getAllMealLogs
      tags:
        - Meal Logs
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MealLog'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'

          
  /metrics/{metric-id}:
    get:
      description: Get a specific metric by ID
      summary: getMetricByMetricId
      tags:
        - Metrics
      parameters:
        - name: metric-id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metric'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
          
    delete:
      description: Delete a metric by ID
      summary: deleteMetric
      tags:
        - Metrics
      parameters:
        - name: metric-id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metric'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
          
    patch:
      description: Update an existing metric
      summary: updateMetric
      tags:
        - Metrics
      parameters:
        - name: metric-id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metric'
      responses:
        '204':
          description: No content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metric'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
          
  /metrics/user/{user-id}:
    get:
      summary: Get metrics based on user ID and optional filters
      operationId: getMetricsByUserId
      tags:
        - Metrics
      parameters:
        - name: user-id
          in: path
          required: true
          description: The ID of the user to retrieve metrics for.
          schema:
            type: integer
            format: int32
        - name: filter
          in: query
          description: Filter metrics by category (Optional)
          schema:
            type: string
            enum:
              - health
              - physique
              - sleep
      responses:
        '200':
          description: Metrics retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Metric'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'
          
    delete:
      description: Delete metrics by user ID
      summary: deleteMetricsByUserId
      tags:
        - Metrics
      parameters:
        - name: user-id
          in: path
          required: true
          description: The ID of the user to retrieve metrics for.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Metric'
        '4XX':
          $ref: '#/components/responses/4XX'

        '5XX':
          $ref: '#/components/responses/5XX'

        
components:
  schemas:
    Activity:
      type: object
      properties:
        activityId:
          type: integer
          description: Unique identifier for the activity
        userId:
          type: integer
          description: Reference to the user associated with the activity
        activityType:
          type: string
          maxLength: 20
          description: Type of activity
        durationMinutes:
          type: integer
          description: Duration of the activity in minutes
        distanceKM:
          type: number
          format: double
          nullable: true
          description: Distance covered in kilometers (nullable)
        workoutIntensity:
          type: string
          maxLength: 20
          description: Intensity level of the workout
        activityDate:
          type: string
          format: date-time
          description: Date and time of the activity
    FitnessGoal:
      type: object
      properties:
        goalId:
          type: integer
          description: Unique identifier for the fitness goal
        userId:
          type: integer
          description: Reference to the user associated with the fitness goal
        goalType:
          type: string
          maxLength: 10
          description: Type of fitness goal (ENUM)
        targetValue:
          type: number
          format: double
          description: Target value for the fitness goal
        targetDate:
          type: string
          format: date-time
          nullable: true
          description: Target date for achieving the goal (nullable)
        achieved:
          type: boolean
          description: Indicates if the fitness goal has been achieved

    FoodItem:
      type: object
      properties:
          foodItemId:
            type: integer
            description: Unique identifier for the food item
          name:
            type: string
            maxLength: 255
            description: Name of the food item
          calories:
            type: integer
            description: Amount of calories in the food item
          carbohydrates:
            type: number
            format: double
            description: Amount of carbohydrates in the food item
          proteins:
            type: number
            format: double
            description: Amount of proteins in the food item
          fats:
            type: number
            format: double
            description: Amount of fats in the food item
          vitamins:
            type: string
            maxLength: 255
            nullable: true
            description: Vitamins in the food item (nullable)
          minerals:
            type: string
            maxLength: 255
            nullable: true
            description: Minerals in the food item (nullable)
            
    MealLog:
      type: object
      properties:
        logId:
          type: integer
        userId:
          type: integer
        mealTime:
          type: string
          format: date-time
        totalCalories:
          type: integer
        foodItems:
          type: array
          items:
            $ref: '#/components/schemas/FoodItem'

    Metric:
      type: object
      properties:
        metricId:
          type: integer
          description: Unique identifier for the metric
        userId:
          type: integer
          description: Reference to the user associated with the metric
        weight:
          type: number
          format: double
          description: Weight of the user
        height:
          type: number
          format: double
          description: Height of the user
        bmi:
          type: number
          format: double
          description: Body Mass Index (BMI) of the user
        systolicBloodPressure:
          type: integer
          description: Systolic blood pressure of the user
        diastolicBloodPressure:
          type: integer
          description: Diastolic blood pressure of the user
        heartRate:
          type: integer
          description: Heart rate of the user
        bloodSugar:
          type: number
          format: double
          description: Blood sugar level of the user
        sleepDuration:
          type: integer
          description: Duration of sleep in minutes
        sleepQuality:
          type: string
          maxLength: 10
          description: Sleep quality (ENUM)
        createdAt:
          type: string
          format: date-time
          description: Date and time of metric creation

    Pong:
      type: object
      properties:
        message:
          type: string
          description: Returns "Pong"
        time: 
          type: string
          format: date-time
          description: Timestamp of the request

    User:
      type: object
      properties:
        userId:
          type: integer
          description: Unique identifier for the user
        username:
          type: string
          maxLength: 50
          description: Username of the user
        email:
          type: string
          maxLength: 100
          description: Email address of the user
        password:
          type: string
          maxLength: 255
          description: Password of the user
        firstName:
          type: string
          maxLength: 50
          description: First name of the user
        lastName:
          type: string
          maxLength: 50
          description: Last name of the user
        dateOfBirth:
          type: string
          format: date-time
          nullable: true
          description: Date of birth of the user (nullable)
        gender:
          type: string
          maxLength: 6
          description: Gender of the user
        registrationDate:
          type: string
          format: date-time
          nullable: true
          description: Registration date of the user (nullable)

    WorkoutPlan:
      type: object
      properties:
        planId:
          type: integer
          description: Unique identifier for the workout plan
        userId:
          type: integer
          description: Reference to the user associated with the workout plan
        planName:
          type: string
          maxLength: 255
          description: Name of the workout plan
        schedule:
          type: string
          maxLength: 50
          nullable: true
          description: Schedule for the workout plan (nullable)
        planDate:
          type: string
          format: date-time
          nullable: true
          description: Date of the workout plan (nullable)
        goal:
          type: string
          maxLength: 20
          description: Goal of the workout plan
        duration:
          type: string
          maxLength: 20
          description: Duration of the workout plan
        description:
          type: string
          maxLength: 150
          description: Description of the workout plan
        content:
          type: string
          format: text
          description: Content or details of the workout plan
          
  responses:
    4XX:
      description: |
        Client error
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 400
                description: |
                  Please review the documentation for [HTTP Response Status Codes](/#section/HTTP-Response-Status-Codes)

                  Possible values are:
                    - 400 - Bad Request
                    - 401 - Unauthorized
                    - 403 - Forbidden
                    - 404 - Not Found
                    - 405 - Method Not Allowed
              name:
                type: string
                example: 'BadRequest'
                description: This value will always be returned as 'bumpy case'.
              message:
                type: string
                description: |
                  The message field will provide specific information as to the reason for the error.
                example: 'The user ID provided is not valid.'

    5XX:
      description: |
        Server error  
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 500
              name:
                type: string
                example: 'InternalServerError'
                description: 'InternalServerError'
              message:
                type: string
                example: 'We are sorry but something went wrong on our side.'
                description: 'We are sorry but something went wrong on our side.'
